help()
demo()
a <- available.packages()
head(rownames(a), 5)
install.packages("slidify")
install.packages("ggplot2")
install.packages("ggplot2")
library()
search()
library(ggplot2)
search()
find.package("devtools")
install.packages("devtools")
install.packages("devtools")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("KernSmooth")
library(KernSmooth)
pnorm( 70, mean=80, sd=10 )
qnorm( 0.95 , mean=1100, sd=75 )
qnorm( 0.95 , mean=1100, sd=7.5 )
pbinom(5 , size=5, prob=0.5 )
pbinom(4 , size=5, prob=0.5 )
1-pbinom(4 , size=5, prob=0.5 )
ppois( 10, lambda = 15 )
1-pbinom(3, size=5, prob=0.5 )
pi
qt(c(0.95),8)
qt(c(0.95),8)*30+1100
qt(c(0.05),8)*30+1100
1100 - qt(c(0.05),8)*30
1100 - qt(c(0.025),8)*30
qt(c(0.95),8)
qt(c(0.98.8),8)
qt(c(0.988),8)
qt(c(0.98.8),8)
qt(c(0.95),8)
2/qt(c(0.95),8)
2/qt(c(0.975),8)
1100+qt(0.975, df=8)*30/sqrt(9)
6/qt(0.975, df=8)
0.6^2+0.68^2
sqrt((0.6^2+0.68^2)/10)
qt(0.975, df=9)*sqrt((0.6^2+0.68^2)/10)
qt(c(0.025, 0.975), df=9)*sqrt((0.6^2+0.68^2)/10)
2+qt(c(0.025, 0.975), df=9)*sqrt((0.6^2+0.68^2)/10)
2+qt(c(0.025, 0.975), df=9)*sqrt((0.6^2+0.68^2))
2+qt(c(0.025, 0.975), df=9)*sqrt((0.6^2+0.68^2)/9)
2.7-1.29
2.75-1.45
0.7/qt(0.975, df=9)
0.75/qt(0.975, df=9)
2+qt(c(0.025, 0.975), df=9)*sqrt((0.6+0.68)/10)
2+qt(c(0.025, 0.975), df=9)*sqrt((0.6+0.68)/9)
2+qt(c(0.025, 0.975), df=9)*sqrt((0.6+0.68)/10)
-2+qt(c(0.025, 0.975), df=9)*sqrt((0.6+0.68)/10)
-2+qnorm(c(0.025, 0.975), df=9)*sqrt((0.6+0.68)/10)
-2+qnorm(c(0.025, 0.975), mu=2, sd=1)*sqrt((0.6+0.68)/10)
-2+qnorm(c(0.025, 0.975), mean=2, sd=1)*sqrt((0.6+0.68)/10)
qnorm(c(0.025, 0.975), mean=2, sd=1)*sqrt((0.6+0.68)/10)
qnorm(c(0.025, 0.975), mean=2, sd=*sqrt((0.6+0.68)/10))
qnorm(c(0.025, 0.975), mean=2, sd=sqrt((0.6+0.68)/10))
qnorm(c(0.025, 0.975), mean=-2, sd=sqrt((0.6+0.68)/10))
qnorm(c(0.025, 0.975), mean=-2, sd=sqrt((0.6+0.68)/9))
qnorm(c(0.025, 0.975), mean=-2, sd=sqrt((0.6+0.68)/10))
qnorm(c(0.025, 0.975), mean=2, sd=sqrt((0.5^2+2^2)/100))
qnorm(c(0.025, 0.975), mean=-4, sd=sqrt((1.5^2+1.8^2)/9))
isInList <- function( evtType, wordList ) {
grepl(evtType, wordList[0])
}
isInList(c("this", "are", "some", "words"), c("this"))
isInList <- function( evtType, wordList ) {
grepl(wordList[0], evtType)
}
isInList(c("this", "are", "some", "words"), c("this"))
isInList <- function( evtType, wordList ) {
grepl("this", evtType)
}
isInList(c("this", "are", "some", "words"), c("this"))
c(this)
c("this")
c("this")[0]
c("this")[1]
isInList <- function( evtType, wordList ) {
grepl(wordList[1], evtType)
}
isInList(c("this", "are", "some", "words"), c("this"))
isInList <- function( evtType, wordList ) {
for (word in wordList) {
grepl(word, evtType)
}
}
isInList(c("this", "are", "some", "words"), c("this", "is"))
isInList <- function( evtType, wordList ) {
total <- rep(FALSE, length(evtType))
for (word in wordList) {
total <- total | grepl(word, evtType)
}
return total
}
isInList <- function( evtType, wordList ) {
total <- rep(FALSE, length(evtType))
for (word in wordList) {
total <- total | grepl(word, evtType)
}
total
}
isInList(c("this", "are", "some", "words"), c("this", "is"))
isInList(c("this", "are", "some", "words"), c("this", "is", "words"))
isInList <- function( evtType, wordList ) {
total <- rep(FALSE, length(evtType))
for (word in wordList) total <- total | grepl(word, evtType)
total
}
isInList(c("this", "are", "some", "words"), c("this", "is", "words"))
N.A.
NA
library(datasets)
data(ToothGrowth)
ToothGrowth
std(ToothGrowth$len)
stdev(ToothGrowth$len)
stddev(ToothGrowth$len)
sd(ToothGrowth$len)
y1 <- c(140, 138, 150, 148, 135)
y2 <- c(132, 135, 151, 146, 130)
t.test(y1,y2,paired=TRUE)
qt(0.025, df=8)
qt(0.025, df=8) *10 + 1100
binom.test(3, 4, 0.5)
binom.test(10, 1787, 0.01)
0.5*(1077+1123)
power.t.test(100, 0.01, sd=0.04, type="one.sample")
power.t.test(100, 0.01, sd=0.04, type="one.sample", alternative="one.sided")
power.t.test(power=0.9, sd=0.01, sd=0.04, type="one.sample", alternative="one.sided")
power.t.test(power=0.9, delta=0.01, sd=0.04, type="one.sample", alternative="one.sided")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
xc <- x - mean(x)
xc
sum(xc)
xc * w
sum(xc * w)
err
x - 5
(x - 5)^2
err <- function(mu) {
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*(x - mu)^2)
}
res <- c(0.1471, 0.3, 1.077, 0.0025)
map(res, err)
sapply(res, err)
err <- function(mu) {
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*((x - mu)^2))
}
res <- c(0.1471, 0.3, 1.077, 0.0025)
sapply(res, err)
err <- function(mu) {
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(w*((x - mu)^2))
}
res <- c(0.1471, 0.3, 1.077, 0.0025)
z <- sapply(seq(0, 1, by=0.1), err)
z
import(ggplot2)
library(ggplot2)
plot(seq(0,1,by=0.1), z)
sapply(res, err)
err
res
xx <- seq(0, 0.3, by)
z <- sapply(xx, err)
plot(xx, z)
xx <- seq(0, 0.3, by=0.01)
z <- sapply(xx, err)
plot(xx, z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x, y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)/sum(x*x)
data(mtcars)
mtcars
plot(mpg, wt)
plot(mtcars$mpg, mtcars$wt)
lm( mpg~wt -1 , data=mtcars)
lm( mpg~wt , data=mtcars)
0.4*1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xn <-   (x - mean(x))/sd( x )
xn
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( x~y )
data <- data.frame(x=x, y=y)
data
ggplot(data, aes(x=x, y=y))+geom.point()
ggplot(data, aes(x=x, y=y))+geom_point()
ggplot(data, aes(x=x, y=y))+geom_point()+geom.smooth(method=lm)
ggplot(data, aes(x=x, y=y))+geom_point()+geom.smoth(method=lm)
ggplot(data, aes(x=x, y=y))+geom_point()+geom_smooth(method=lm)
lm( y~x )
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
View(ToothGrowth)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
residuals(lm(y~x))
(residuals(lm(y~x))^2)
sum(residuals(lm(y~x))^2)/(7)
sqrt(sum(residuals(lm(y~x))^2)/(7))
plot(x,y)
summary(lm(y~x))
data(mtcars)
mtcars
lm( mpg ~ wt , data=mtcars)
summarize(lm( mpg ~ wt , data=mtcars))
summarise(lm( mpg ~ wt , data=mtcars))
summary(lm( mpg ~ wt , data=mtcars))
mean(mtcars$wt)
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
predict(fit, mean(x))
predict(fit, data.frame(x1 = c(mean(x))))
predict(fit, data.frame(x1 = c(mean(x))),  interval="confidence"  )
predict(fit, data.frame( mean(x) ),  interval="confidence"  )
predict(fit, data.frame( x = mean(x) ),  interval="confidence"  )
mtcars
predict(fit, data.frame( x =3 ),  interval="confidence"  )
predict(fit, data.frame( x =3 ),  interval="predict"  )
fit
-5.344*2
summary(fit)
x1 <- x / 2
x1
x
summary(lm( y ~ x1 ))
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
summary(fit)
(y - mean(y))^2
sum((y - mean(y))^2)
residuals
residuals( fit )
residuals( fit )^2
sum(residuals( fit )^2)
278.3219/1126
sum(residuals( fit ))
mtcars
summary(lm( mpg ~ cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb , data = mtcars ))$coefficients
temp <- summary(lm( mpg ~ cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb , data = mtcars ))$coefficients
temp$Estimate
temp
as.data.frame(temp)
temp <- as.data.frame(temp)
temp$Estimate
library(dplyr)
temp %>% sort(Estimate)
temp %>% sort(Estimate)
sort(temp)
sort(temp, Estimate)
sort(temp, order(Estimate))
temp[order(Estimate)]
mtcars[order(mpg)]
mtcars[order(mpg),]
mtcars[order(mpg),]
arrange(temp, Estimate)
arrange(temp, abs(Estimate))
arrange(temp, desc(abs(Estimate)))
index(temp)
rownames(temp)
temp$Predictors <- rownames(temp)
temp
mtcars
corr(mtcars)
install.packages("gplots")
library(gplots)
heatmap.2( as.matrix(mtcars) )
temp <- as.matrix(mtcars)
transpose(temp)
t(temp)
heatmap.2( t(as.matrix(mtcars)) )
rcorr( t(as.matrix(mtcars)) )
library(Hmisc)
rcorr( t(as.matrix(mtcars)) )
rcorr( as.matrix(mtcars) )
heatmap.2(rcorr( as.matrix(mtcars) ))
heatmap.2( as.matrix(rcorr( as.matrix(mtcars) ))  )
rcorr( as.matrix(mtcars) )
temp <- rcorr( as.matrix(mtcars) )
summary(temp)
temp$r
heatmap.2(temp$r)
cols <- colorRampPalette(brewer.pal(10, "RdBu"))(256)
install.packages("RColorBrewer")
library(RColorB)
install.packages("RColorBrewer")
library("RColorBrewer")
ncols(mtcars)
mtcars$ncols
mtcars
cols <- colorRampPalette(brewer.pal(10, "RdBu"))(256)
corrs <- rcorr( as.matrix(mtcars) )
library(Hmisc)
corrs <- rcorr( as.matrix(mtcars)
)
heatmap.2(corrs, col=rev(cols))
library(gplots)
heatmap.2(corrs, col=rev(cols))
rcorr( as.matrix(mtcars))
rcorr( as.matrix(mtcars))$r
library(gplots)
library(Hmisc)
library("RColorBrewer")
corrs <- rcorr( as.matrix(mtcars))$r
cols <- colorRampPalette(brewer.pal(10, "RdBu"))(256)
heatmap.2(as.matrix(corrs), col=rev(cols))
library(gplots)
library(Hmisc)
library("RColorBrewer")
corrs <- abs(rcorr( as.matrix(mtcars))$r)
cols <- colorRampPalette(brewer.pal(10, "RdBu"))(256)
heatmap.2(as.matrix(corrs), col=rev(cols))
library(gplots)
library(Hmisc)
library("RColorBrewer")
corrs <- abs(rcorr( as.matrix(mtcars))$r)
cols <- colorRampPalette(brewer.pal(10, "RdBu"))(256)
heatmap.2(as.matrix(corrs))
install.packages("gridExtra")
library(gridExtra)
?mtcars
mtcars
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(MASS)
?shuttle
head(shuttle)
glm( use ~ wind  , data=shuttle )
glm( factor(use) ~ wind  , data=shuttle )
glm( factor(use) ~ factor(wind)  , data=shuttle )
glm( use ~ wind  , data=shuttle, family=binomial )
summary(glm( use ~ wind  , data=shuttle, family=binomial ))
exp(2.513)
exp(2.831)
plot(x, y)
library(AppliedPredictiveModeling)
install.packages("library(AppliedPredictiveModeling)")
install.packages("AppliedPredictiveModeling")
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(concrete)
concrete$Superplasticizer
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer + 1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
install.packages("caret")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training$columns
training$names
columns(training)
column(training)
colnames(training)
grepl("IL_", colnames(training))
colnames(training)[grepl("IL_", colnames(training))]
IL_str <- grep("^IL", colnames(training), value = TRUE)
IL_str
preProcess( training[, IL_str], method="pca", thresh=0.8 )
prep <- preProcess( training[, IL_str], method="pca", thresh=0.8 )
summary(prep)
prep$rotation
model1 <- train( ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8 , method = "glm")
model1 <- train( diagnosis ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8 , method = "glm")
model1 <- train( diagnosis ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8 , method = "glm", data=training)
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
model1 <- train( diagnosis ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8 , method = "glm", data=training)
predict(model1 , newdata = testing)
predict1 <- predict(model1 , newdata = testing)
confusionMatrix( predict1, testing$diagnosis )
prep
model2 <- train( diagnosis ~ IL_11 + IL_13 + IL_16 + IL_17E + IL_1alpha + IL_3 + IL_4 + IL_5 + IL_6 + IL_6_Receptor + IL_7 + IL_8 , method = "glm", preProcess="pca", trControl = trainControl( preProcOptions = list(thresh=0.8) ) , data=training)
confusionMatrix(  testing$diagnosis, predict(model2, newdata = testing) )
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("AppliedPredictiveModeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("ElemStatLearn")
library("ElemStatLearn", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("pgmm")
library("pgmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
set.seed(125)
seed(125)
segmentationOriginal$Case == True
segmentationOriginal$Case == TRUE
training <- segmentationOriginal[segmentationOriginal$Case == "Train", ]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test", ]
model = train( Class ~ .  , data = training, method = 'rpart')
library(rattle)
install.packages("rattle")
library(rattle)
setwd("~/Documents/tutorials/coursea/Signatre track - Data Science/09. Developing Data Products/Course Project/www")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pwd()
ls
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
